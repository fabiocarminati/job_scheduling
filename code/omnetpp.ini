[Config No_Failure-Minimal_Cost]
network = Net
sim-time-limit = 1000s
cpu-time-limit = 300s
**.C=2  # number of clients
**.E=4	# number of executors
**.channelDelay=0s  # transmission time over the channel either amid clients and executors or amis executors
**.channelStorageDelay=0s # transmission time over the channel amid an executor and his storage

# these values don't consider the transmission time over the channel
**.client[*].sendingTime=0.1s # each client generates packets according to an exponential distribution whose mean is this value
**.client[*].timeoutAck=0.5s  # period of time during which the client waits for the ACK coming from the executor to which it has sent the new job
**.client[*].timeoutStatus=1s # timeout useful for the periodic check of status of the jobs generated made by that client
**.client[0].jobComplexity=0.5s # execution time for the packets coming from client with ID=0
**.client[*].jobComplexity=2s # execution time for the packets coming from all the other clients

**.client[*].maxRetry=3 # max number of times a client will send the same packet to the same executor after the timeoutAck expiration

# these values don't consider the transmission time over the channel
**.executor[*].granularity=5 # specifies the load balancing granularity 
**.executor[*].probeResponse=3 # specifies the granularity for the probe response
**.executor[*].probEvent=0 # threshold value for the probability that an executor crashes immediately after receiving a packet
**.executor[*].probCrashDuringExecution=0  # threshold value for the probability that an executor crashes in the middle of the processing of a packet
**.executor[*].timeoutLoad=0.1s # timeout after which the executor decides whether to perform load balancing or not 
**.executor[*].timeoutFailure=1s #period of time during which the executor is unavailable after a failure occurs



[Config No_Failure-Optimal_Load_Balancing]
network = Net
sim-time-limit = 1000s
cpu-time-limit = 300s
**.C=2  # number of clients
**.E=4	# number of executors
**.channelDelay=0s  # transmission time over the channel either amid clients and executors or amis executors
**.channelStorageDelay=0s # transmission time over the channel amid an executor and his storage

# these values don't consider the transmission time over the channel
**.client[*].sendingTime=0.1s # each client generates packets according to an exponential distribution whose mean is this value
**.client[*].timeoutAck=0.5s  # period of time during which the client waits for the ACK coming from the executor to which it has sent the new job
**.client[*].timeoutStatus=1s # timeout useful for the periodic check of status of the jobs generated made by that client
**.client[0].jobComplexity=0.5s # execution time for the packets coming from client with ID=0
**.client[*].jobComplexity=2s # execution time for the packets coming from all the other clients

**.client[*].maxRetry=3 # max number of times a client will send the same packet to the same executor after the timeoutAck expiration

# these values don't consider the transmission time over the channel
**.executor[*].granularity=1 # specifies the load balancing granularity 
**.executor[*].probeResponse=1 # specifies the granularity for the probe response
**.executor[*].probEvent=0 # threshold value for the probability that an executor crashes immediately after receiving a packet
**.executor[*].probCrashDuringExecution=0  # threshold value for the probability that an executor crashes in the middle of the processing of a packet
**.executor[*].timeoutLoad=0.1s # timeout after which the executor decides whether to perform load balancing or not 
**.executor[*].timeoutFailure=1s #period of time during which the executor is unavailable after a failure occurs



[Config Failure-Minimal_Cost]
network = Net
sim-time-limit = 1000s
cpu-time-limit = 300s
**.C=2  # number of clients
**.E=4	# number of executors
**.channelDelay=0s  # transmission time over the channel either amid clients and executors or amis executors
**.channelStorageDelay=0s # transmission time over the channel amid an executor and his storage

# these values don't consider the transmission time over the channel
**.client[*].sendingTime=0.1s # each client generates packets according to an exponential distribution whose mean is this value
**.client[*].timeoutAck=0.5s  # period of time during which the client waits for the ACK coming from the executor to which it has sent the new job
**.client[*].timeoutStatus=1s # timeout useful for the periodic check of status of the jobs generated made by that client
**.client[0].jobComplexity=0.5s # execution time for the packets coming from client with ID=0
**.client[*].jobComplexity=2s # execution time for the packets coming from all the other clients

**.client[*].maxRetry=3 # max number of times a client will send the same packet to the same executor after the timeoutAck expiration

# these values don't consider the transmission time over the channel
**.executor[*].granularity=5 # specifies the load balancing granularity 
**.executor[*].probeResponse=3 # specifies the granularity for the probe response
**.executor[*].probEvent=0.1 # threshold value for the probability that an executor crashes immediately after receiving a packet
**.executor[*].probCrashDuringExecution=0.09  # threshold value for the probability that an executor crashes in the middle of the processing of a packet
**.executor[*].timeoutLoad=0.1s # timeout after which the executor decides whether to perform load balancing or not 
**.executor[*].timeoutFailure=1s #period of time during which the executor is unavailable after a failure occurs


[Config Failure-Optimal_Load_Balancing]
network = Net
sim-time-limit = 1000s
cpu-time-limit = 300s

**.C=2  # number of clients
**.E=4	# number of executors
**.channelDelay=0s  # transmission time over the channel either amid clients and executors or amis executors
**.channelStorageDelay=0s # transmission time over the channel amid an executor and his storage

# these values don't consider the transmission time over the channel
**.client[*].sendingTime=0.1s # each client generates packets according to an exponential distribution whose mean is this value
**.client[*].timeoutAck=0.5s  # period of time during which the client waits for the ACK coming from the executor to which it has sent the new job
**.client[*].timeoutStatus=1s # timeout useful for the periodic check of status of the jobs generated made by that client
**.client[0].jobComplexity=0.5s # execution time for the packets coming from client with ID=0
**.client[*].jobComplexity=2s # execution time for the packets coming from all the other clients

**.client[*].maxRetry=3 # max number of times a client will send the same packet to the same executor after the timeoutAck expiration

# these values don't consider the transmission time over the channel
**.executor[*].granularity=1 # specifies the load balancing granularity 
**.executor[*].probeResponse=1 # specifies the granularity for the probe response
**.executor[*].probEvent=0.1 # threshold value for the probability that an executor crashes immediately after receiving a packet
**.executor[*].probCrashDuringExecution=0.09  # threshold value for the probability that an executor crashes in the middle of the processing of a packet
**.executor[*].timeoutLoad=0.1s # timeout after which the executor decides whether to perform load balancing or not 
**.executor[*].timeoutFailure=1s #period of time during which the executor is unavailable after a failure occurs



